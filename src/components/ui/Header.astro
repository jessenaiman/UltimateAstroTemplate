---
import { frameworks } from "../../data/navigation";

const currentPath = Astro.url.pathname;
const isActivePath = (path: string) => {
  const normalizedCurrent = currentPath.replace(/\/+$/, "").toLowerCase();
  const normalizedPath = path.replace(/\/+$/, "").toLowerCase();
  return path === "/"
    ? normalizedCurrent === "" || normalizedCurrent === "/"
    : normalizedCurrent.endsWith(normalizedPath);
};
---

<header class="top-0 left-0 right-0 z-50">
  <nav class="container mx-auto px-4 py-6">
    {/* Desktop Navigation */}
    <div class="hidden lg:flex justify-between items-center">
      {/* Navigation Links */}
      <div class="bg-gray-900/50 dark:bg-gray-800/50 backdrop-blur-md px-6 py-2.5 rounded-full border border-gray-800/50">
        {
          frameworks.map((framework, index) => (
            <>
              {index !== 0 && (
                <span class="mx-4 text-gray-600 dark:text-gray-400">|</span>
              )}
              <a
                href={framework.path}
                class:list={[
                  "relative px-3 py-1.5 text-sm transition-all duration-300 font-medium font-sans",
                  isActivePath(framework.path)
                    ? "text-white bg-gray-800/80 dark:bg-gray-700/80 rounded-lg border border-gray-700/50 shadow-[0_0_15px_rgba(0,0,0,0.3)]"
                    : "text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white",
                ]}
              >
                {framework.displayName}
              </a>
            </>
          ))
        }
      </div>

      {/* Theme Toggle */}
      <button
        id="theme-toggle"
        type="button"
        class="text-gray-500 dark:text-gray-400 hover:bg-gray-900/50 dark:hover:bg-gray-700 rounded-lg text-sm p-2.5"
      >
        <svg
          id="theme-toggle-dark-icon"
          class="w-5 h-5"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
        </svg>
        <svg
          id="theme-toggle-light-icon"
          class="hidden w-5 h-5"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
          ></path>
        </svg>
      </button>
    </div>

    {/* Mobile Navigation */}
    <div class="lg:hidden">
      <button
        id="mobile-menu-button"
        type="button"
        class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600"
        aria-label="toggle menu"
      >
        <svg viewBox="0 0 24 24" class="h-6 w-6 fill-current">
          <path
            fill-rule="evenodd"
            d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"
          ></path>
        </svg>
      </button>
    </div>
  </nav>

  {/* Mobile Menu */}
  <div
    id="mobile-menu"
    class="fixed inset-0 z-50 lg:hidden bg-gray-800/95 hidden"
  >
    <div class="container mx-auto px-4 py-6">
      <div class="flex justify-end">
        <button
          id="mobile-menu-close"
          type="button"
          class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            ></path>
          </svg>
        </button>
      </div>
      <div class="mt-8">
        {
          frameworks.map((framework) => (
            <a
              href={framework.path}
              class:list={[
                "block py-2 text-center text-lg font-medium transition-colors duration-300",
                isActivePath(framework.path)
                  ? "text-white"
                  : "text-gray-400 hover:text-white",
              ]}
            >
              {framework.displayName}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</header>

<script>
  // Theme toggle functionality
  function setupTheme() {
    const themeToggle = document.getElementById("theme-toggle");
    const darkIcon = document.getElementById("theme-toggle-dark-icon");
    const lightIcon = document.getElementById("theme-toggle-light-icon");

    // Get theme from localStorage or system preference
    function getTheme() {
      const savedTheme = localStorage.getItem("theme");
      if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {
        return savedTheme;
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }

    // Set theme in localStorage and HTML
    function setTheme(theme) {
      document.documentElement.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);

      // Update icons
      if (theme === "dark") {
        darkIcon?.classList.add("hidden");
        lightIcon?.classList.remove("hidden");
      } else {
        darkIcon?.classList.remove("hidden");
        lightIcon?.classList.add("hidden");
      }
    }

    // Set initial theme and icons
    setTheme(getTheme());

    // Toggle theme
    themeToggle?.addEventListener("click", () => {
      const currentTheme = getTheme();
      const newTheme = currentTheme === "light" ? "dark" : "light";
      setTheme(newTheme);
    });

    // Handle theme changes during view transitions
    document.addEventListener('astro:after-swap', () => {
      setTheme(getTheme());
    });
  }

  // Mobile menu functionality
  function setupMobileMenu() {
    const button = document.getElementById("mobile-menu-button");
    const close = document.getElementById("mobile-menu-close");
    const menu = document.getElementById("mobile-menu");

    const toggleMenu = () => {
      menu?.classList.toggle("hidden");
      document.body.classList.toggle("overflow-hidden");
    };

    button?.addEventListener("click", toggleMenu);
    close?.addEventListener("click", toggleMenu);
  }

  // Initialize everything
  function init() {
    setupTheme();
    setupMobileMenu();
  }

  // Run on initial load
  init();

  // Re-run after view transitions
  document.addEventListener('astro:after-swap', init);
</script>

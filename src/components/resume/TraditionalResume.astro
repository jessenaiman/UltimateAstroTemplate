---
import { getCollection } from 'astro:content';

// Fetch all collections
const [jobs, skills, personal, education] = await Promise.all([
  getCollection('jobs'),
  getCollection('skills'),
  getCollection('personal'),
  getCollection('education')
]);

// Sort jobs by date (newest first)
const sortedJobs = jobs.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Sort education by date (newest first)
const sortedEducation = education.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

const personalInfo = personal[0]?.data;
const technicalSkills = skills.find(skill => skill.id === 'technical')?.data;
---

<div class="traditional-resume bg-white text-gray-900 p-8 max-w-4xl mx-auto print:p-0 print:max-w-none">
  <!-- Header -->
  <header class="mb-8 text-center print:mb-6">
    <h1 class="text-4xl font-bold text-gray-900 mb-2">{personalInfo?.name || 'Your Name'}</h1>
    <p class="text-lg text-gray-600 mb-4">{personalInfo?.title || 'Your Professional Title'}</p>
    <div class="flex flex-wrap justify-center gap-4 text-sm text-gray-600">
      {personalInfo?.email && (
        <span>{personalInfo.email}</span>
      )}
      {personalInfo?.phone && (
        <span>• {personalInfo.phone}</span>
      )}
      {personalInfo?.location && (
        <span>• {personalInfo.location}</span>
      )}
      {personalInfo?.website && (
        <span>• {personalInfo.website.replace(/^https?:\/\//, '')}</span>
      )}
    </div>
  </header>

  <!-- Summary -->
  {personalInfo?.summary && (
    <section class="mb-8">
      <h2 class="text-xl font-bold border-b border-gray-200 pb-1 mb-4">SUMMARY</h2>
      <p class="text-gray-700">{personalInfo.summary}</p>
    </section>
  )}

  <!-- Technical Skills -->
  {technicalSkills && (
    <section class="mb-8">
      <h2 class="text-xl font-bold border-b border-gray-200 pb-1 mb-4">TECHNICAL SKILLS</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {technicalSkills.items.map(skill => (
          <div class="flex items-center">
            <span class="font-medium w-40">{skill.name}</span>
            {skill.level && (
              <div class="flex-1">
                <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                  <div 
                    class="h-full bg-indigo-600" 
                    style={`width: ${(skill.level / 5) * 100}%`}
                  ></div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </section>
  )}

  <!-- Professional Experience -->
  <section class="mb-8">
    <h2 class="text-xl font-bold border-b border-gray-200 pb-1 mb-4">PROFESSIONAL EXPERIENCE</h2>
    <div class="space-y-6">
      {sortedJobs.map(job => {
        const startDate = new Date(job.data.date);
        const endDate = job.data.endDate ? new Date(job.data.endDate) : 'Present';
        const formattedDate = endDate === 'Present' 
          ? `${startDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - Present`
          : `${startDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${endDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}`;
        
        return (
          <div class="break-inside-avoid">
            <div class="flex flex-col md:flex-row md:justify-between">
              <h3 class="text-lg font-semibold">{job.data.title}</h3>
              <span class="text-gray-600">{formattedDate}</span>
            </div>
            <div class="flex justify-between text-gray-700 text-sm mb-2">
              <span>{job.data.employer}</span>
              {job.data.location && <span>{job.data.location}</span>}
            </div>
            
            {job.data.achievements && job.data.achievements.length > 0 && (
              <ul class="list-disc pl-5 space-y-1 text-gray-700">
                {job.data.achievements.map(achievement => (
                  <li>{achievement}</li>
                ))}
              </ul>
            )}
            
            {job.data.technologies && (
              <div class="mt-2 flex flex-wrap gap-1">
                {job.data.technologies.split(',').map(tech => (
                  <span class="px-2 py-0.5 bg-gray-100 text-gray-700 rounded text-xs">
                    {tech.trim()}
                  </span>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </div>
  </section>

  <!-- Education -->
  {sortedEducation.length > 0 && (
    <section class="mb-8">
      <h2 class="text-xl font-bold border-b border-gray-200 pb-1 mb-4">EDUCATION</h2>
      <div class="space-y-4">
        {sortedEducation.map(edu => (
          <div class="break-inside-avoid">
            <div class="flex flex-col md:flex-row md:justify-between">
              <h3 class="font-semibold">{edu.data.degree}</h3>
              <span class="text-gray-600">{edu.data.date}</span>
            </div>
            <div class="text-gray-700">
              {edu.data.institution}
              {edu.data.location && `, ${edu.data.location}`}
              {edu.data.gpa && ` • GPA: ${edu.data.gpa}`}
            </div>
            {edu.data.description && (
              <p class="text-gray-600 text-sm mt-1">{edu.data.description}</p>
            )}
          </div>
        ))}
      </div>
    </section>
  )}

  <!-- Contact Information -->
  <footer class="mt-12 pt-6 border-t border-gray-200 text-center text-sm text-gray-500 print:hidden">
    <p>References available upon request</p>
    <div class="mt-2 flex justify-center space-x-4">
      {personalInfo?.github && (
        <a href={personalInfo.github} class="text-indigo-600 hover:underline">GitHub</a>
      )}
      {personalInfo?.linkedin && (
        <a href={personalInfo.linkedin} class="text-indigo-600 hover:underline">LinkedIn</a>
      )}
      {personalInfo?.twitter && (
        <a href={personalInfo.twitter} class="text-indigo-600 hover:underline">Twitter</a>
      )}
    </div>
  </footer>
</div>

<style>
  @media print {
    @page {
      margin: 1cm;
    }
    
    body {
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
      font-size: 12pt;
      line-height: 1.3;
    }
    
    .traditional-resume {
      max-width: 100%;
      padding: 0;
    }
    
    h1, h2, h3, h4, h5, h6 {
      page-break-after: avoid;
    }
    
    section, div {
      page-break-inside: avoid;
    }
    
    a {
      text-decoration: none;
      color: inherit;
    }
  }
  
  .break-inside-avoid {
    break-inside: avoid;
  }
</style>
